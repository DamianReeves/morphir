// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod morphir_ir {
        pub mod name {
            #[allow(clippy::all)]
            pub mod name {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum Run {
                    Run(_rt::String),
                }
                impl ::core::fmt::Debug for Run {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Run::Run(e) => f.debug_tuple("Run::Run").field(e).finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub enum Name {
                    Name(_rt::Vec<Run>),
                }
                impl ::core::fmt::Debug for Name {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Name::Name(e) => f.debug_tuple("Name::Name").field(e).finish(),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_from_string_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::from_string(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Name::Name(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec4 = e;
                            let len4 = vec4.len();
                            let layout4 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 12, 4);
                            let result4 = if layout4.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout4);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec4.into_iter().enumerate() {
                                let base = result4.add(i * 12);
                                {
                                    match e {
                                        Run::Run(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let vec3 = (e.into_bytes()).into_boxed_slice();
                                            let ptr3 = vec3.as_ptr().cast::<u8>();
                                            let len3 = vec3.len();
                                            ::core::mem::forget(vec3);
                                            *base.add(8).cast::<usize>() = len3;
                                            *base.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                                        }
                                    }
                                }
                            }
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = result4;
                        }
                    }
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_from_string<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        _ => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 12);
                                {
                                    let l1 = i32::from(*base.add(0).cast::<u8>());
                                    match l1 {
                                        _ => {
                                            let l2 = *base.add(4).cast::<*mut u8>();
                                            let l3 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 12, 4);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_to_string_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    let v6 = match arg0 {
                        n => {
                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                            let e6 = {
                                let base5 = arg1;
                                let len5 = arg2;
                                let mut result5 = _rt::Vec::with_capacity(len5);
                                for i in 0..len5 {
                                    let base = base5.add(i * 12);
                                    let e5 = {
                                        let l0 = i32::from(*base.add(0).cast::<u8>());
                                        let v4 = match l0 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e4 = {
                                                    let l1 = *base.add(4).cast::<*mut u8>();
                                                    let l2 = *base.add(8).cast::<usize>();
                                                    let len3 = l2;
                                                    let bytes3 = _rt::Vec::from_raw_parts(
                                                        l1.cast(),
                                                        len3,
                                                        len3,
                                                    );

                                                    _rt::string_lift(bytes3)
                                                };
                                                Run::Run(e4)
                                            }
                                        };

                                        v4
                                    };
                                    result5.push(e5);
                                }
                                _rt::cabi_dealloc(base5, len5 * 12, 4);

                                result5
                            };
                            Name::Name(e6)
                        }
                    };
                    let result7 = T::to_string(v6);
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec9 = (result7.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    ::core::mem::forget(vec9);
                    *ptr8.add(4).cast::<usize>() = len9;
                    *ptr8.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_to_string<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn from_string(input: _rt::String) -> Name;
                    fn to_string(name: Name) -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_morphir_ir_name_name_0_1_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "morphir-ir:name/name@0.1.0#from-string"]
        unsafe extern "C" fn export_from_string(arg0: *mut u8,arg1: usize,) -> *mut u8 {
          $($path_to_types)*::_export_from_string_cabi::<$ty>(arg0, arg1)
        }
        #[export_name = "cabi_post_morphir-ir:name/name@0.1.0#from-string"]
        unsafe extern "C" fn _post_return_from_string(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_from_string::<$ty>(arg0)
        }
        #[export_name = "morphir-ir:name/name@0.1.0#to-string"]
        unsafe extern "C" fn export_to_string(arg0: i32,arg1: *mut u8,arg2: usize,) -> *mut u8 {
          $($path_to_types)*::_export_to_string_cabi::<$ty>(arg0, arg1, arg2)
        }
        #[export_name = "cabi_post_morphir-ir:name/name@0.1.0#to-string"]
        unsafe extern "C" fn _post_return_to_string(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_to_string::<$ty>(arg0)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_morphir_ir_name_name_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_morphir_ir_name_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::morphir_ir::name::name::__export_morphir_ir_name_name_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::morphir_ir::name::name);
  )
}
#[doc(inline)]
pub(crate) use __export_morphir_ir_name_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:morphir-ir-name:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 312] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb2\x01\x01A\x02\x01\
A\x02\x01B\x09\x01q\x01\x03run\x01s\0\x04\0\x03run\x03\0\0\x01p\x01\x01q\x01\x04\
name\x01\x02\0\x04\0\x04name\x03\0\x03\x01@\x01\x05inputs\0\x04\x04\0\x0bfrom-st\
ring\x01\x05\x01@\x01\x04name\x04\0s\x04\0\x09to-string\x01\x06\x04\x01\x1amorph\
ir-ir:name/name@0.1.0\x05\0\x04\x01%morphir-ir:name/morphir-ir-name@0.1.0\x04\0\x0b\
\x15\x01\0\x0fmorphir-ir-name\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
